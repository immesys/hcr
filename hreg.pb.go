// Code generated by protoc-gen-go.
// source: hreg.proto
// DO NOT EDIT!

/*
Package hcr is a generated protocol buffer package.

Version 1.0

It is generated from these files:
	hreg.proto

It has these top-level messages:
	Auth
	Status
	GetMoteIDParams
	GetMoteIDResponse
	CreateInstanceParams
	CreateInstanceResponse
	CreateDeploymentParams
	CreateDeploymentResponse
	BindMoteParams
	BindMoteResponse
	MoteInfoParams
	MoteInfoResponse
*/
package hcr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Auth struct {
	UserSecret       string `protobuf:"bytes,1,opt,name=userSecret" json:"userSecret,omitempty"`
	DeploymentSecret string `protobuf:"bytes,2,opt,name=deploymentSecret" json:"deploymentSecret,omitempty"`
}

func (m *Auth) Reset()                    { *m = Auth{} }
func (m *Auth) String() string            { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()               {}
func (*Auth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Auth) GetUserSecret() string {
	if m != nil {
		return m.UserSecret
	}
	return ""
}

func (m *Auth) GetDeploymentSecret() string {
	if m != nil {
		return m.DeploymentSecret
	}
	return ""
}

type Status struct {
	Okay    bool   `protobuf:"varint,1,opt,name=okay" json:"okay,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetOkay() bool {
	if m != nil {
		return m.Okay
	}
	return false
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetMoteIDParams struct {
	Auth     *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=deviceId" json:"deviceId,omitempty"`
}

func (m *GetMoteIDParams) Reset()                    { *m = GetMoteIDParams{} }
func (m *GetMoteIDParams) String() string            { return proto.CompactTextString(m) }
func (*GetMoteIDParams) ProtoMessage()               {}
func (*GetMoteIDParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetMoteIDParams) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *GetMoteIDParams) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type GetMoteIDResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Id     uint32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Mac    string  `protobuf:"bytes,3,opt,name=mac" json:"mac,omitempty"`
}

func (m *GetMoteIDResponse) Reset()                    { *m = GetMoteIDResponse{} }
func (m *GetMoteIDResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMoteIDResponse) ProtoMessage()               {}
func (*GetMoteIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetMoteIDResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetMoteIDResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetMoteIDResponse) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type CreateInstanceParams struct {
	Auth       *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	DeviceId   string `protobuf:"bytes,2,opt,name=deviceId" json:"deviceId,omitempty"`
	Repository string `protobuf:"bytes,3,opt,name=repository" json:"repository,omitempty"`
	Commit     string `protobuf:"bytes,4,opt,name=commit" json:"commit,omitempty"`
	Motetype   uint64 `protobuf:"varint,5,opt,name=motetype" json:"motetype,omitempty"`
	Extradata  string `protobuf:"bytes,6,opt,name=extradata" json:"extradata,omitempty"`
}

func (m *CreateInstanceParams) Reset()                    { *m = CreateInstanceParams{} }
func (m *CreateInstanceParams) String() string            { return proto.CompactTextString(m) }
func (*CreateInstanceParams) ProtoMessage()               {}
func (*CreateInstanceParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateInstanceParams) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *CreateInstanceParams) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CreateInstanceParams) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *CreateInstanceParams) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *CreateInstanceParams) GetMotetype() uint64 {
	if m != nil {
		return m.Motetype
	}
	return 0
}

func (m *CreateInstanceParams) GetExtradata() string {
	if m != nil {
		return m.Extradata
	}
	return ""
}

type CreateInstanceResponse struct {
	Status    *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Id        uint32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Mac       string  `protobuf:"bytes,3,opt,name=mac" json:"mac,omitempty"`
	Ed25519VK []byte  `protobuf:"bytes,4,opt,name=ed25519VK,proto3" json:"ed25519VK,omitempty"`
	Ed25519SK []byte  `protobuf:"bytes,5,opt,name=ed25519SK,proto3" json:"ed25519SK,omitempty"`
	AESK      []byte  `protobuf:"bytes,6,opt,name=AESK,json=aESK,proto3" json:"AESK,omitempty"`
}

func (m *CreateInstanceResponse) Reset()                    { *m = CreateInstanceResponse{} }
func (m *CreateInstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateInstanceResponse) ProtoMessage()               {}
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateInstanceResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateInstanceResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateInstanceResponse) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *CreateInstanceResponse) GetEd25519VK() []byte {
	if m != nil {
		return m.Ed25519VK
	}
	return nil
}

func (m *CreateInstanceResponse) GetEd25519SK() []byte {
	if m != nil {
		return m.Ed25519SK
	}
	return nil
}

func (m *CreateInstanceResponse) GetAESK() []byte {
	if m != nil {
		return m.AESK
	}
	return nil
}

type CreateDeploymentParams struct {
	Auth *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CreateDeploymentParams) Reset()                    { *m = CreateDeploymentParams{} }
func (m *CreateDeploymentParams) String() string            { return proto.CompactTextString(m) }
func (*CreateDeploymentParams) ProtoMessage()               {}
func (*CreateDeploymentParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateDeploymentParams) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *CreateDeploymentParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateDeploymentResponse struct {
	Status   *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ReadKey  string  `protobuf:"bytes,2,opt,name=readKey" json:"readKey,omitempty"`
	WriteKey string  `protobuf:"bytes,3,opt,name=writeKey" json:"writeKey,omitempty"`
}

func (m *CreateDeploymentResponse) Reset()                    { *m = CreateDeploymentResponse{} }
func (m *CreateDeploymentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeploymentResponse) ProtoMessage()               {}
func (*CreateDeploymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateDeploymentResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateDeploymentResponse) GetReadKey() string {
	if m != nil {
		return m.ReadKey
	}
	return ""
}

func (m *CreateDeploymentResponse) GetWriteKey() string {
	if m != nil {
		return m.WriteKey
	}
	return ""
}

type BindMoteParams struct {
	Auth           *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Moteid         uint32 `protobuf:"varint,2,opt,name=moteid" json:"moteid,omitempty"`
	Deployment     string `protobuf:"bytes,3,opt,name=deployment" json:"deployment,omitempty"`
	RemoveExisting bool   `protobuf:"varint,4,opt,name=removeExisting" json:"removeExisting,omitempty"`
}

func (m *BindMoteParams) Reset()                    { *m = BindMoteParams{} }
func (m *BindMoteParams) String() string            { return proto.CompactTextString(m) }
func (*BindMoteParams) ProtoMessage()               {}
func (*BindMoteParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BindMoteParams) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *BindMoteParams) GetMoteid() uint32 {
	if m != nil {
		return m.Moteid
	}
	return 0
}

func (m *BindMoteParams) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

func (m *BindMoteParams) GetRemoveExisting() bool {
	if m != nil {
		return m.RemoveExisting
	}
	return false
}

type BindMoteResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *BindMoteResponse) Reset()                    { *m = BindMoteResponse{} }
func (m *BindMoteResponse) String() string            { return proto.CompactTextString(m) }
func (*BindMoteResponse) ProtoMessage()               {}
func (*BindMoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BindMoteResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type MoteInfoParams struct {
	Auth   *Auth  `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Moteid uint32 `protobuf:"varint,2,opt,name=moteid" json:"moteid,omitempty"`
}

func (m *MoteInfoParams) Reset()                    { *m = MoteInfoParams{} }
func (m *MoteInfoParams) String() string            { return proto.CompactTextString(m) }
func (*MoteInfoParams) ProtoMessage()               {}
func (*MoteInfoParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MoteInfoParams) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *MoteInfoParams) GetMoteid() uint32 {
	if m != nil {
		return m.Moteid
	}
	return 0
}

type MoteInfoResponse struct {
	Status     *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	AESK       []byte  `protobuf:"bytes,2,opt,name=AESK,json=aESK,proto3" json:"AESK,omitempty"`
	Ed25519VK  []byte  `protobuf:"bytes,3,opt,name=ed25519VK,proto3" json:"ed25519VK,omitempty"`
	Repository string  `protobuf:"bytes,4,opt,name=repository" json:"repository,omitempty"`
	Commit     string  `protobuf:"bytes,5,opt,name=commit" json:"commit,omitempty"`
	Motetype   uint64  `protobuf:"varint,6,opt,name=motetype" json:"motetype,omitempty"`
	Extradata  string  `protobuf:"bytes,7,opt,name=extradata" json:"extradata,omitempty"`
}

func (m *MoteInfoResponse) Reset()                    { *m = MoteInfoResponse{} }
func (m *MoteInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MoteInfoResponse) ProtoMessage()               {}
func (*MoteInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MoteInfoResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MoteInfoResponse) GetAESK() []byte {
	if m != nil {
		return m.AESK
	}
	return nil
}

func (m *MoteInfoResponse) GetEd25519VK() []byte {
	if m != nil {
		return m.Ed25519VK
	}
	return nil
}

func (m *MoteInfoResponse) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *MoteInfoResponse) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *MoteInfoResponse) GetMotetype() uint64 {
	if m != nil {
		return m.Motetype
	}
	return 0
}

func (m *MoteInfoResponse) GetExtradata() string {
	if m != nil {
		return m.Extradata
	}
	return ""
}

func init() {
	proto.RegisterType((*Auth)(nil), "hcr.Auth")
	proto.RegisterType((*Status)(nil), "hcr.Status")
	proto.RegisterType((*GetMoteIDParams)(nil), "hcr.GetMoteIDParams")
	proto.RegisterType((*GetMoteIDResponse)(nil), "hcr.GetMoteIDResponse")
	proto.RegisterType((*CreateInstanceParams)(nil), "hcr.CreateInstanceParams")
	proto.RegisterType((*CreateInstanceResponse)(nil), "hcr.CreateInstanceResponse")
	proto.RegisterType((*CreateDeploymentParams)(nil), "hcr.CreateDeploymentParams")
	proto.RegisterType((*CreateDeploymentResponse)(nil), "hcr.CreateDeploymentResponse")
	proto.RegisterType((*BindMoteParams)(nil), "hcr.BindMoteParams")
	proto.RegisterType((*BindMoteResponse)(nil), "hcr.BindMoteResponse")
	proto.RegisterType((*MoteInfoParams)(nil), "hcr.MoteInfoParams")
	proto.RegisterType((*MoteInfoResponse)(nil), "hcr.MoteInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HamiltonRegistry service

type HamiltonRegistryClient interface {
	// Create or get a mote ID given its device ID
	// Create requires admin
	// Get is always permitted
	GetMoteID(ctx context.Context, in *GetMoteIDParams, opts ...grpc.CallOption) (*GetMoteIDResponse, error)
	// Create a new instance (program)
	// Requires deployment key
	CreateInstance(ctx context.Context, in *CreateInstanceParams, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	// Create a new deployment (keyring)
	// Requires admin
	CreateDeployment(ctx context.Context, in *CreateDeploymentParams, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	// Bind a mote into a deployment
	// Requires admin
	BindMote(ctx context.Context, in *BindMoteParams, opts ...grpc.CallOption) (*BindMoteResponse, error)
	// Get the key for a mote id
	// Requires a deployment key
	MoteInfo(ctx context.Context, in *MoteInfoParams, opts ...grpc.CallOption) (*MoteInfoResponse, error)
}

type hamiltonRegistryClient struct {
	cc *grpc.ClientConn
}

func NewHamiltonRegistryClient(cc *grpc.ClientConn) HamiltonRegistryClient {
	return &hamiltonRegistryClient{cc}
}

func (c *hamiltonRegistryClient) GetMoteID(ctx context.Context, in *GetMoteIDParams, opts ...grpc.CallOption) (*GetMoteIDResponse, error) {
	out := new(GetMoteIDResponse)
	err := grpc.Invoke(ctx, "/hcr.HamiltonRegistry/GetMoteID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hamiltonRegistryClient) CreateInstance(ctx context.Context, in *CreateInstanceParams, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := grpc.Invoke(ctx, "/hcr.HamiltonRegistry/CreateInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hamiltonRegistryClient) CreateDeployment(ctx context.Context, in *CreateDeploymentParams, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := grpc.Invoke(ctx, "/hcr.HamiltonRegistry/CreateDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hamiltonRegistryClient) BindMote(ctx context.Context, in *BindMoteParams, opts ...grpc.CallOption) (*BindMoteResponse, error) {
	out := new(BindMoteResponse)
	err := grpc.Invoke(ctx, "/hcr.HamiltonRegistry/BindMote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hamiltonRegistryClient) MoteInfo(ctx context.Context, in *MoteInfoParams, opts ...grpc.CallOption) (*MoteInfoResponse, error) {
	out := new(MoteInfoResponse)
	err := grpc.Invoke(ctx, "/hcr.HamiltonRegistry/MoteInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HamiltonRegistry service

type HamiltonRegistryServer interface {
	// Create or get a mote ID given its device ID
	// Create requires admin
	// Get is always permitted
	GetMoteID(context.Context, *GetMoteIDParams) (*GetMoteIDResponse, error)
	// Create a new instance (program)
	// Requires deployment key
	CreateInstance(context.Context, *CreateInstanceParams) (*CreateInstanceResponse, error)
	// Create a new deployment (keyring)
	// Requires admin
	CreateDeployment(context.Context, *CreateDeploymentParams) (*CreateDeploymentResponse, error)
	// Bind a mote into a deployment
	// Requires admin
	BindMote(context.Context, *BindMoteParams) (*BindMoteResponse, error)
	// Get the key for a mote id
	// Requires a deployment key
	MoteInfo(context.Context, *MoteInfoParams) (*MoteInfoResponse, error)
}

func RegisterHamiltonRegistryServer(s *grpc.Server, srv HamiltonRegistryServer) {
	s.RegisterService(&_HamiltonRegistry_serviceDesc, srv)
}

func _HamiltonRegistry_GetMoteID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoteIDParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HamiltonRegistryServer).GetMoteID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hcr.HamiltonRegistry/GetMoteID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HamiltonRegistryServer).GetMoteID(ctx, req.(*GetMoteIDParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _HamiltonRegistry_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HamiltonRegistryServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hcr.HamiltonRegistry/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HamiltonRegistryServer).CreateInstance(ctx, req.(*CreateInstanceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _HamiltonRegistry_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HamiltonRegistryServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hcr.HamiltonRegistry/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HamiltonRegistryServer).CreateDeployment(ctx, req.(*CreateDeploymentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _HamiltonRegistry_BindMote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindMoteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HamiltonRegistryServer).BindMote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hcr.HamiltonRegistry/BindMote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HamiltonRegistryServer).BindMote(ctx, req.(*BindMoteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _HamiltonRegistry_MoteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoteInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HamiltonRegistryServer).MoteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hcr.HamiltonRegistry/MoteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HamiltonRegistryServer).MoteInfo(ctx, req.(*MoteInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _HamiltonRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hcr.HamiltonRegistry",
	HandlerType: (*HamiltonRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMoteID",
			Handler:    _HamiltonRegistry_GetMoteID_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _HamiltonRegistry_CreateInstance_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _HamiltonRegistry_CreateDeployment_Handler,
		},
		{
			MethodName: "BindMote",
			Handler:    _HamiltonRegistry_BindMote_Handler,
		},
		{
			MethodName: "MoteInfo",
			Handler:    _HamiltonRegistry_MoteInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hreg.proto",
}

func init() { proto.RegisterFile("hreg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x56, 0xda, 0x2c, 0x6b, 0xcf, 0x46, 0x09, 0x66, 0x54, 0xa1, 0x30, 0x34, 0x19, 0x09, 0x4d,
	0x5c, 0x4c, 0x62, 0x68, 0x43, 0xbb, 0x1c, 0x6c, 0xda, 0xa6, 0x00, 0x42, 0x8e, 0xc4, 0x05, 0x77,
	0x26, 0x39, 0xb4, 0x11, 0x4b, 0x5c, 0xd9, 0xee, 0x58, 0x9e, 0x82, 0x47, 0xe1, 0x21, 0x78, 0x08,
	0x2e, 0x78, 0x19, 0x14, 0x2f, 0x3f, 0x4d, 0x28, 0xd3, 0xaa, 0x71, 0x97, 0x73, 0x8e, 0xfd, 0xf9,
	0xf3, 0x39, 0xdf, 0xe7, 0x00, 0x4c, 0x24, 0x8e, 0x77, 0xa6, 0x52, 0x68, 0x41, 0xba, 0x93, 0x50,
	0x52, 0x06, 0xf6, 0xe1, 0x4c, 0x4f, 0xc8, 0x13, 0x80, 0x99, 0x42, 0x19, 0x60, 0x28, 0x51, 0x7b,
	0xd6, 0x96, 0xb5, 0xdd, 0x67, 0x73, 0x19, 0xf2, 0x1c, 0xdc, 0x08, 0xa7, 0xe7, 0x22, 0x4b, 0x30,
	0xd5, 0xc5, 0xaa, 0x8e, 0x59, 0xf5, 0x57, 0x9e, 0xee, 0x83, 0x13, 0x68, 0xae, 0x67, 0x8a, 0x10,
	0xb0, 0xc5, 0x57, 0x9e, 0x19, 0xbc, 0x1e, 0x33, 0xdf, 0xc4, 0x83, 0xd5, 0x04, 0x95, 0xe2, 0x63,
	0x2c, 0x00, 0xca, 0x90, 0xbe, 0x85, 0xbb, 0x27, 0xa8, 0xdf, 0x09, 0x8d, 0x67, 0x47, 0x1f, 0xb8,
	0xe4, 0x89, 0x22, 0x9b, 0x60, 0xf3, 0x99, 0x9e, 0x18, 0x80, 0xb5, 0xdd, 0xfe, 0xce, 0x24, 0x94,
	0x3b, 0x39, 0x5f, 0x66, 0xd2, 0x64, 0x04, 0xbd, 0x08, 0x2f, 0xe2, 0x10, 0xcf, 0xa2, 0x02, 0xac,
	0x8a, 0xe9, 0x27, 0xb8, 0x57, 0xa1, 0x31, 0x54, 0x53, 0x91, 0x2a, 0x24, 0x4f, 0xc1, 0x51, 0x86,
	0x5a, 0x81, 0xb8, 0x66, 0x10, 0xaf, 0xd8, 0xb2, 0xa2, 0x44, 0x06, 0xd0, 0x89, 0xaf, 0xf0, 0xee,
	0xb0, 0x4e, 0x1c, 0x11, 0x17, 0xba, 0x09, 0x0f, 0xbd, 0xae, 0x39, 0x20, 0xff, 0xa4, 0x3f, 0x2d,
	0xd8, 0x78, 0x23, 0x91, 0x6b, 0x3c, 0x4b, 0x95, 0xe6, 0x69, 0x88, 0xb7, 0xe6, 0x9b, 0x4f, 0x40,
	0xe2, 0x54, 0xa8, 0x58, 0x0b, 0x99, 0x15, 0x87, 0xcd, 0x65, 0xc8, 0x10, 0x9c, 0x50, 0x24, 0x49,
	0xac, 0x3d, 0xdb, 0xd4, 0x8a, 0x28, 0xc7, 0x4c, 0x84, 0x46, 0x9d, 0x4d, 0xd1, 0x5b, 0xd9, 0xb2,
	0xb6, 0x6d, 0x56, 0xc5, 0xe4, 0x31, 0xf4, 0xf1, 0x52, 0x4b, 0x1e, 0x71, 0xcd, 0x3d, 0xc7, 0x6c,
	0xab, 0x13, 0xf4, 0x87, 0x05, 0xc3, 0xe6, 0x2d, 0xfe, 0x73, 0x9f, 0xcc, 0xf9, 0xd1, 0xee, 0xde,
	0xde, 0x8b, 0x83, 0x8f, 0xbe, 0xa1, 0xbd, 0xce, 0xea, 0xc4, 0x5c, 0x35, 0xf0, 0x0d, 0xf5, 0xba,
	0x1a, 0xf8, 0xb9, 0x76, 0x0e, 0x8f, 0x03, 0xdf, 0xd0, 0x5e, 0x67, 0x36, 0x3f, 0x0e, 0x7c, 0xea,
	0x97, 0x84, 0x8f, 0x2a, 0xcd, 0xdd, 0xac, 0xf1, 0x04, 0xec, 0x94, 0x27, 0xa5, 0xe2, 0xcc, 0x37,
	0x9d, 0x81, 0xd7, 0x06, 0x5b, 0xee, 0xfe, 0x1e, 0xac, 0x4a, 0xe4, 0x91, 0x8f, 0x59, 0xa9, 0xe4,
	0x22, 0xcc, 0x67, 0xf2, 0x4d, 0xc6, 0x1a, 0xf3, 0xd2, 0x55, 0x3b, 0xaa, 0x98, 0x7e, 0xb7, 0x60,
	0xf0, 0x3a, 0x4e, 0xa3, 0x5c, 0x99, 0x37, 0x23, 0x3f, 0x04, 0x27, 0x9f, 0x68, 0xd5, 0xeb, 0x22,
	0xca, 0x15, 0x53, 0x7b, 0xaf, 0x54, 0x4c, 0x9d, 0x21, 0xcf, 0x60, 0x20, 0x31, 0x11, 0x17, 0x78,
	0x7c, 0x19, 0x2b, 0x1d, 0xa7, 0x63, 0x33, 0x82, 0x1e, 0x6b, 0x65, 0xe9, 0x2b, 0x70, 0x4b, 0x42,
	0x4b, 0x35, 0x80, 0x9e, 0xc0, 0xc0, 0xf8, 0x2b, 0xfd, 0x22, 0x6e, 0x75, 0x13, 0xfa, 0xdb, 0x02,
	0xb7, 0x44, 0x5a, 0x6e, 0x06, 0xa5, 0x4a, 0x3a, 0xb5, 0x4a, 0x9a, 0xaa, 0xeb, 0xb6, 0x55, 0xd7,
	0xf4, 0x99, 0x7d, 0x8d, 0xcf, 0x56, 0xfe, 0xe9, 0x33, 0xe7, 0x3a, 0x9f, 0xad, 0xb6, 0x7c, 0xb6,
	0xfb, 0xab, 0x03, 0xee, 0x29, 0x4f, 0xe2, 0x73, 0x2d, 0x52, 0x86, 0xe3, 0x58, 0x69, 0x99, 0x91,
	0x03, 0xe8, 0x57, 0xcf, 0x13, 0xd9, 0x30, 0x57, 0x6b, 0x3d, 0x7e, 0xa3, 0x61, 0x33, 0x5b, 0x35,
	0xe6, 0x14, 0x06, 0x4d, 0xdb, 0x92, 0x87, 0x66, 0xe5, 0xa2, 0x17, 0x69, 0xf4, 0x68, 0x41, 0xa9,
	0x42, 0x7a, 0x0f, 0x6e, 0xdb, 0x02, 0x64, 0x7e, 0x43, 0xdb, 0x66, 0xa3, 0xcd, 0x85, 0xc5, 0x0a,
	0x6f, 0x1f, 0x7a, 0xa5, 0x92, 0xc8, 0x7d, 0xb3, 0xb4, 0xa9, 0xf4, 0xd1, 0x83, 0x46, 0x72, 0x7e,
	0x5f, 0x39, 0xfe, 0x62, 0x5f, 0x53, 0x57, 0xc5, 0xbe, 0xb6, 0x44, 0x3e, 0x3b, 0xe6, 0x4f, 0xf6,
	0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xd7, 0xa7, 0x84, 0xd7, 0x06, 0x00, 0x00,
}
